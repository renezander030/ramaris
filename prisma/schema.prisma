generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LoginToken {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  redirect  String   @default("/")
}

model WalletSnapshot {
  id                      Int      @id @default(autoincrement())
  totalBalanceUsd         Float?
  coinBalanceUsd          Float?
  totalBalanceTokensUsd   Float?
  ProfitLossPercentage    Float?
  tokens                  Token[]
  discoveredOnBlockNumber Int
  discoveredOnTx          String
  timestamp               String
  chain                   String
  Wallet                  Wallet?  @relation(fields: [walletId], references: [id])
  walletId                Int
  createdAt               DateTime @default(now())
}

model Wallet {
  id              Int              @id @default(autoincrement())
  walletAddress   String           @unique
  WalletSnapshots WalletSnapshot[]
  swaps           Swap[]
  StarWallet      StarWallet[]
  bots            WalletsOnBots[]
  createdAt       DateTime         @default(now())

  @@map(name: "wallet")
}

model Swap {
  id                           Int                           @id @default(autoincrement())
  transactionHash              String?
  amountIn                     Float
  sentTokenContractAddress     String
  amountOutMin                 Float
  receivedTokenContractAddress String
  timestamp                    String
  methodName                   String
  methodVerified               Boolean
  blockNumber                  String
  gas                          String
  gasPrice                     String
  cumulativeGasUsed            String
  gasUsed                      String
  Wallet                       Wallet                        @relation(fields: [walletId], references: [id])
  walletId                     Int
  // contract interacted with during the transaction
  contract                     Contract?                     @relation(fields: [contractId], references: [id])
  contractId                   Int?
  createdAt                    DateTime                      @default(now())
  SentTokenContract            SentTokenContractOnSwap[]
  ReceivedTokenContract        ReceivedTokenContractOnSwap[]
  contractAddress              String
}

model SentTokenContractOnSwap {
  TokenContract TokenContract? @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId    Int
  Swap          Swap?          @relation(fields: [swapId], references: [id], onDelete: Cascade)
  swapId        Int

  @@id([contractId, swapId])
}

model ReceivedTokenContractOnSwap {
  TokenContract TokenContract? @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId    Int
  Swap          Swap?          @relation(fields: [swapId], references: [id], onDelete: Cascade)
  swapId        Int

  @@id([contractId, swapId])
}

// https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields
model Bot {
  id                     Int             @id @default(autoincrement())
  name                   String
  shareId                String          @unique
  state                  Boolean         @default(false)
  wallets                WalletsOnBots[]
  botsFollowedBy         Bot[]           @relation("BotFollows") // bot can follow other bots
  botsFollowing          Bot[]           @relation("BotFollows") // bot can follow other bots
  weekdays               Int[]
  hours                  Int[]
  whitelistTokens        String[]
  blacklistTokens        String[]
  blacklistProtocols     String[]
  transactionValue       Int[]
  gasValue               Int[]
  actions                ActionsOnBots[]
  creator                User?           @relation(fields: [creatorId], references: [id])
  creatorId              String          @map("user_id")
  positions              Position[]
  StarBot                StarBot[]
  positionSizePercentage Int
  takeprofitPercentage   Int?
  stoplossPercentage     Int?
  createdAt              DateTime        @default(now())
}

model WalletsOnBots {
  Bot      Bot?    @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId    Int
  Wallet   Wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId Int

  @@id([walletId, botId])
}

model Action {
  id   Int             @id @default(autoincrement())
  name String
  bots ActionsOnBots[]
}

model ActionsOnBots {
  Bot      Bot?    @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId    Int
  Action   Action? @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId Int

  @@id([botId, actionId])
}

model TokenContract {
  id                          Int                           @id @default(autoincrement())
  contractAddress             String                        @unique
  name                        String
  symbol                      String
  decimals                    Int
  image                       String
  mcap                        Int
  chain                       String
  tokens                      Token[]
  createdAt                   DateTime                      @default(now())
  SentTokenContractOnSwap     SentTokenContractOnSwap[]
  ReceivedTokenContractOnSwap ReceivedTokenContractOnSwap[]
  PositionsSent               Position[]                    @relation(name: "sentTokenContract")
  PositionsReceived           Position[]                    @relation(name: "receivedTokenContract")
}

model Token {
  id               Int             @id @default(autoincrement())
  contractAddress  String          @unique
  contract         TokenContract?  @relation(fields: [tokenContractId], references: [id])
  tokenContractId  Int?
  balance          Float
  balanceUsd       Float
  WalletSnapshot   WalletSnapshot? @relation(fields: [walletSnapshotId], references: [id])
  walletSnapshotId Int?

  @@map(name: "tokens")
}

model Contract {
  id              Int        @id @default(autoincrement())
  contractAddress String     @unique
  name            String?
  chain           String?
  swaps           Swap[]
  createdAt       DateTime   @default(now())
  Position        Position[]
}

// insert into position originate from SP_swap_changed and bots matching having actions include position
// actions send telegram messages are included as well. difference is shown in prop positionType
model Position {
  id           Int      @id // combined of swap id/bot id or followed bot id/bot id
  // core data
  createdAt    DateTime @default(now())
  // copied from swap
  amountIn     Float
  amountOutMin Float
  // bot parameters
  actionType   String // long/short. on app version 0.1 only spot buys. action type = long

  // not to be used from a relation: bot parameters - point in time values
  positionSizePercentage Int
  takeprofitPercentage   Int?
  stoplossPercentage     Int?
  // contract relation - interacted contract

  // contract relations - sent token contract/received
  sentTokenContract       TokenContract @relation(map: "Position_SentTokenContractId_fkey", name: "sentTokenContract", fields: [sentTokenContractId], references: [id])
  sentTokenContractId     Int
  receivedTokenContract   TokenContract @relation(map: "Position_ReceivedTokenContractId_fkey", name: "receivedTokenContract", fields: [receivedTokenContractId], references: [id])
  receivedTokenContractId Int
  // bot relation
  botId                   Int
  bot                     Bot?          @relation(fields: [botId], references: [id], onDelete: Cascade)

  interactedContract Contract @relation(fields: [contractId], references: [id])
  contractId         Int
}

model Query {
  id          Int        @id @default(autoincrement())
  name        String
  savedResult String
  Dashboard   Dashboard? @relation(fields: [DashboardId], references: [id])
  DashboardId Int?
  createdAt   DateTime   @default(now())
}

model Dashboard {
  id        Int         @id @default(autoincrement())
  name      String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  queries   Query[]
  StarBoard StarBoard[]
  createdAt DateTime    @default(now())
}

// m:n many users can follow many wallets
// explicit relation to allow adding properties on the relation itself
model StarWallet {
  // id       Int    @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  wallet     Wallet   @relation(fields: [walletId], references: [id])
  walletId   Int
  followedAt DateTime @default(now())

  @@id([userId, walletId])
  @@map(name: "starredwallets")
}

model StarBot {
  // id     Int    @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  bot        Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId      Int
  followedAt DateTime @default(now())

  @@id([userId, botId])
  @@map(name: "starredbots")
}

model StarBoard {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  board       Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId Int
  followedAt  DateTime  @default(now())
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime     @default(now()) @map(name: "created_at")
  updatedAt       DateTime     @updatedAt @map(name: "updated_at")
  bybitApiKey     String?
  ethereumAddress String?
  accounts        Account[]
  sessions        Session[]
  createdBots     String[]
  StarWallet      StarWallet[]
  StarBot         StarBot[]
  StarBoard       StarBoard[]
  Bot             Bot[]
  Dashboard       Dashboard[]
  LoginToken      LoginToken[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
